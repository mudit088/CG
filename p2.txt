#include<windows.h>
#include<stdio.h>
#include<math.h>
#include<gl/glut.h>
void display()
{
glClear(GL_COLOR_BUFFER_BIT);
glClearColor(1.0, 1.0, 1.0, 1);
glMatrixMode(GL_MODELVIEW);
int p1[] = {50, 100};
int p2[] = {200, 100};
int p3[] = {125, 200};
glColor3f(0.0,0.0,1.0);
glBegin(GL_TRIANGLES);
glVertex2iv(p1);
glVertex2iv(p2);
glVertex2iv(p3);
glEnd();
int sx=1; int sy=2;
 p1[0]= p1[0] * sx;
 p1[1]= p1[1] * sy;
 p2[0]= p2[0] * sx;
 p2[1]= p2[1] * sy;
 p3[0]= p3[0] * sx;
 p3[1]= p3[1] * sy;
 glColor3f(0.0,1.0,0.0);
glBegin(GL_TRIANGLES);
glVertex2iv(p1);
glVertex2iv(p2);
glVertex2iv(p3);
glEnd();
int tx=100; int ty=100;
 p1[0]= p1[0] + tx;
 p1[1]= p1[1] + ty;
 p2[0]= p2[0] + tx;
 p2[1]= p2[1] + ty;
 p3[0]= p3[0] + tx;
 p3[1]= p3[1] + ty;
glColor3f(1.0,0.0,0.0);
glBegin(GL_TRIANGLES);
glVertex2iv(p1);
glVertex2iv(p2);
glVertex2iv(p3);
glEnd();
glFlush();
}
int main(int argc, char**argv)
{
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize(1000, 1000);
glutCreateWindow("Geometric Operations on 2D Objects");
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluOrtho2D(0, 500, 0, 500);
glutDisplayFunc(display);
glutMainLoop();
}